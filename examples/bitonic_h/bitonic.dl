#bitonic sort

function bitonic_sort
inout: a1[size]:int
{
   outersize = 2;
   while (outersize <= size)
   {
       if (outersize >4)
       { 
             map {
                 segId := [0: size/outersize);
                 map { 
                    index := [0: outersize/4);
                    new_index = segId * outersize + outersize/2 + index;
                    new_index_mirror = segId * outersize + outersize - index - 1 ;
                    tmp = a1[new_index];
                    a1[new_index] = a1[new_index_mirror];
                    a1[new_index_mirror] = tmp;
                 }
             }
       }

       innersize = outersize;
       while (innersize >= 2)
       {
        if (innersize == 512)
          {
             # block version   
             map {
                 blockid := [0, outersize);
             }
             break;
          }
        else 
          {
              map {
                 segId := [0 : size/innersize);
                 map {
                    
                 }
              }
              innersize >>= 1;
          } 
       }
   } 
   
}